C51 COMPILER V9.53.0.0   NRF24L01                                                          04/14/2019 16:40:32 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN .\Objects\NRF24L01.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE SRC\NRF24L01.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\INC) DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\NRF24L01.lst) OBJECT(.\Objects\NRF24L01.obj)

line level    source

   1          #include <reg52.h>
   2          #include "NRF24L01.h"
   3          sfr P5   = 0xC8;
   4          //****************************************NRF24L01端口定义***************************************
   5          sbit CE   = P5^5;
   6          sbit CSN  = P5^4;
   7          sbit SCK  = P1^5;
   8          sbit MOSI = P1^4;//修改后
   9          sbit MISO = P1^3;
  10          
  11          //*********************************************NRF24L01*************************************
  12          uchar const TX_ADDRESS[5]={0x00,0x00,0x00,0x00,0xA1};//接收本机 地址
  13          uchar const RX_ADDRESS[5]={0x00,0x00,0x00,0x00,0xA1};//发送目标 地址
  14          //***************************************NRF24L01寄存器指令***********************************************
             -********
  15          #define ADR_WIDTH       5       // 3-5  字节 地址设定长度
  16          #define PLOAD_WIDTH     4       // 1-32 字节 数据设定长度
  17          #define READ_REG        0x00    // 读寄存器指令
  18          #define WRITE_REG       0x20    // 写寄存器指令
  19          #define RD_RX_PLOAD     0x61    // 读取接收数据指令
  20          #define WR_TX_PLOAD     0xA0    // 写待发数据指令
  21          #define FLUSH_TX        0xE1    // 冲洗发送 FIFO指令
  22          #define FLUSH_RX        0xE2    // 冲洗接收 FIFO指令
  23          #define REUSE_TX_PL     0xE3    // 定义重复装载数据指令
  24          #define NOP             0xFF    // 保留
  25          //*************************************SPI(nRF24L01)寄存器地址********************************************
             -********
  26          #define CONFIG          0x00  // 配置收发状态，CRC校验模式以及收发状态响应方式
  27          #define EN_AA           0x01  // 自动应答功能设置
  28          #define EN_RXADDR       0x02  // 可用信道设置
  29          #define SETUP_AW        0x03  // 收发地址宽度设置
  30          #define SETUP_RETR      0x04  // 自动重发功能设置
  31          #define RF_CH           0x05  // 工作频率设置
  32          #define RF_SETUP        0x06  // 发射速率、功耗功能设置
  33          #define STATUS          0x07  // 状态寄存器
  34          #define OBSERVE_TX      0x08  // 发送监测功能
  35          #define CD              0x09  // 地址检测           
  36          #define RX_ADDR_P0      0x0A  // 频道0接收数据地址
  37          #define RX_ADDR_P1      0x0B  // 频道1接收数据地址
  38          #define RX_ADDR_P2      0x0C  // 频道2接收数据地址
  39          #define RX_ADDR_P3      0x0D  // 频道3接收数据地址
  40          #define RX_ADDR_P4      0x0E  // 频道4接收数据地址
  41          #define RX_ADDR_P5      0x0F  // 频道5接收数据地址
  42          #define TX_ADDR         0x10  // 发送地址寄存器
  43          #define RX_PW_P0        0x11  // 接收频道0接收数据长度
  44          #define RX_PW_P1        0x12  // 接收频道0接收数据长度
  45          #define RX_PW_P2        0x13  // 接收频道0接收数据长度
  46          #define RX_PW_P3        0x14  // 接收频道0接收数据长度
  47          #define RX_PW_P4        0x15  // 接收频道0接收数据长度
  48          #define RX_PW_P5        0x16  // 接收频道0接收数据长度
  49          #define FIFO_STATUS     0x17  // FIFO栈入栈出状态寄存器设置
  50          //******************************************************************************************
  51          uchar   bdata sta;   //状态标志
  52          sbit    RX_DR   =sta^6;
C51 COMPILER V9.53.0.0   NRF24L01                                                          04/14/2019 16:40:32 PAGE 2   

  53          sbit    TX_DS   =sta^5;
  54          sbit    MAX_RT  =sta^4;
  55          //*****************************************长延时*****************************************
  56          void delays(unsigned char s)
  57          {
  58   1              unsigned char i;
  59   1              for(i=0; i<s; i++)
  60   1       {
  61   2              _nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
  62   2       }
  63   1      }       
  64          /****************************************************************************************************
  65          /*功能：NRF24L01的 SPI同步读写时序
  66          /****************************************************************************************************/
  67          uchar SPI_RW(uchar reg)
  68          {
  69   1              uchar bit_ctr;
  70   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
  71   1              {
  72   2                      MOSI = (reg & 0x80);         // output 'uchar', MSB to MOSI
  73   2                      reg = (reg << 1);           // shift next bit into MSB..
  74   2                      SCK = 1;                      // Set SCK high..
  75   2                      reg |= MISO;                      // capture current MISO bit
  76   2                      SCK = 0;                          // ..then set SCK low again
  77   2              }
  78   1          return(reg);                          // return read uchar
  79   1      }
  80          /****************************************************************************************************
  81          /*功能：NRF24L01的SPI读寄存器时序
  82          /****************************************************************************************************/
  83          uchar SPI_Read(uchar reg)
  84          {
  85   1              uchar reg_val;
  86   1              CSN = 0;                // CSN low, initialize SPI communication...
  87   1              SPI_RW(reg);            // Select register to read from..
  88   1              reg_val = SPI_RW(0);    // ..then read registervalue
  89   1              CSN = 1;                // CSN high, terminate SPI communication
  90   1              return(reg_val);        // return register value
  91   1      }
  92          /****************************************************************************************************/
  93          /*功能：NRF24L01读写寄存器函数
  94          /****************************************************************************************************/
  95          uchar SPI_RW_Reg(uchar reg, uchar value)
  96          {
  97   1              uchar status;
  98   1              CSN = 0;                   // CSN low, init SPI transaction
  99   1              status = SPI_RW(reg);      // select register
 100   1              SPI_RW(value);             // ..and write value to it..
 101   1              CSN = 1;                   // CSN high again
 102   1              return(status);            // return nRF24L01 status uchar
 103   1      }
 104          /****************************************************************************************************/
 105          /*功能: 用于读数据，reg：为寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数
 106          /****************************************************************************************************/
 107          void SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 108          {
 109   1              uchar i;
 110   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 111   1              SPI_RW(reg);                    // Select register to write to and read status uchar
 112   1              for(i=0;i<uchars;i++)
 113   1              pBuf[i] = SPI_RW(0);    // 
 114   1              CSN = 1;                           
C51 COMPILER V9.53.0.0   NRF24L01                                                          04/14/2019 16:40:32 PAGE 3   

 115   1      }
 116          /*********************************************************************************************************
 117          /*功能: 用于写数据：为寄存器地址，pBuf：为待写入数据地址，uchars：写入数据的个数
 118          /*********************************************************************************************************
             -/
 119          void SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 120          {
 121   1              uchar status,i;
 122   1              CSN = 0;            //SPI使能       
 123   1              status = SPI_RW(reg);   
 124   1              for(i=0; i<uchars;i++) //
 125   1                      SPI_RW(*pBuf++);
 126   1              CSN = 1;           //关闭SPI
 127   1      }
 128          /*********************************************************************************************************
             -**
 129          /*功能：发送 TX_buf中数据
 130          /*********************************************************************************************************
             -*/
 131          void nRF24L01_TX_Mode(unsigned char * TX_buf)
 132          {
 133   1              CE=0;                   //StandBy I模式 
 134   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, ADR_WIDTH); // 装载接收端地址
 135   1              SPI_Write_Buf(WR_TX_PLOAD, TX_buf, PLOAD_WIDTH);// 装载数据     
 136   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);// IRQ收发完成中断响应，16位CRC，发送
 137   1              CE=1;            //置高CE，激发数据发送
 138   1              delays(250);//模块发送延时重要120-250之间
 139   1      //      Delay(250);//模块发送延时重要120-250之间
 140   1      }
 141          /****************************************************************************************************/
 142          /*功能：数据接收模式 
 143          /****************************************************************************************************/
 144          void nRF24L01_RX_Mode(unsigned char * RX_buf)
 145          {
 146   1              CE=0;
 147   1          SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, ADR_WIDTH);    // 写本地地址 
 148   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);// IRQ收发完成中断响应，16位CRC，接收
 149   1              sta=SPI_Read(STATUS);   // 读取状态寄存其来判断数据接收状况
 150   1              if(RX_DR)                               // 判断是否接收到数据
 151   1              SPI_Read_Buf(RD_RX_PLOAD,RX_buf,PLOAD_WIDTH);   //读取数据完成标志
 152   1              SPI_RW_Reg(WRITE_REG+STATUS,sta);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
 153   1              CE = 1;
 154   1          delays(200);
 155   1              //Delay(200);Delay(200);
 156   1      }
 157          /****************************************************************************************
 158            NRF24L01初始化
 159          //***************************************************************************************/
 160          void init_NRF24L01(void)
 161          {
 162   1      
 163   1              CE  = 0;        // 待机
 164   1              CSN = 1;        // SPI禁止
 165   1              SCK = 0;        // SPI时钟置低
 166   1              delays(200);delays(200);delays(200);
 167   1              CE=0;    // chip enable
 168   1              CSN=1;   // Spi  disable 
 169   1              SCK=0;   // 
 170   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS,ADR_WIDTH);    // 写本地地址      
 171   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS,ADR_WIDTH); // 写接收端地址
 172   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      //  频道0自动 ACK应答允许     
 173   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //  允许接收地址只有频道0，如果需要多频道可以参考Page21  
C51 COMPILER V9.53.0.0   NRF24L01                                                          04/14/2019 16:40:32 PAGE 4   

 174   1              SPI_RW_Reg(WRITE_REG + RF_CH, 0);        //   设置信道工作为2.4GHZ，收发必须一致
 175   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, PLOAD_WIDTH); //设置接收数据长度，
 176   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);                 //设置发射速率为1MHZ，发射功率为最大值0dB
 177   1          delays(200);delays(200);
 178   1      }
 179          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    366    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
